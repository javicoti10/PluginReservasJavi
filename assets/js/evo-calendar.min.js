/*!
 * Evo Calendar - Simple and Modern-looking Event Calendar Plugin
 *
 * Licensed under the MIT License
 * 
 * Version: 1.1.3
 * Author: Edlyn Villegas
 * Docs: https://edlynvillegas.github.com/evo-calendar
 * Repo: https://github.com/edlynvillegas/evo-calendar
 * Issues: https://github.com/edlynvillegas/evo-calendar/issues
 * 
 */
(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
    } else if (typeof exports !== "undefined") {
        module.exports = factory(require("jquery"));
    } else {
        factory(jQuery);
    }
}(function($) {
    "use strict";
    var EvoCalendar = window.EvoCalendar || {};
    var instanceUid = 0;

    EvoCalendar = function(element, settings) {
        var _ = this;

        _.defaults = {
            theme: null,
            format: "mm/dd/yyyy",
            titleFormat: "MM yyyy",
            eventHeaderFormat: "MM d, yyyy",
            firstDayOfWeek: 0,
            language: "en",
            todayHighlight: false,
            sidebarDisplayDefault: true,
            sidebarToggler: true,
            eventDisplayDefault: true,
            eventListToggler: true,
            calendarEvents: null
        };

        _.options = $.extend({}, _.defaults, settings);

        _.initials = {
            default_class: $(element)[0].classList.value,
            validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
            dates: {
                en: {
                    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                    monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                    noEventForToday: "No event for today.. so take a rest! :)",
                    noEventForThisDay: "No event for this day.. so take a rest! :)",
                    previousYearText: "Previous year",
                    nextYearText: "Next year",
                    closeSidebarText: "Close sidebar",
                    closeEventListText: "Close event list"
                },
                es: {
                    days: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
                    daysShort: ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"],
                    daysMin: ["Do", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa"],
                    months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
                    monthsShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
                    noEventForToday: "No hay evento para hoy.. ¡así que descanse! :)",
                    noEventForThisDay: "Ningún evento para este día.. ¡así que descanse! :)",
                    previousYearText: "Año anterior",
                    nextYearText: "El próximo año",
                    closeSidebarText: "Cerrar la barra lateral",
                    closeEventListText: "Cerrar la lista de eventos"
                },
                de: {
                    days: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                    daysShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                    daysMin: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                    months: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
                    monthsShort: ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
                    noEventForToday: "Keine Veranstaltung für heute.. also ruhen Sie sich aus! :)",
                    noEventForThisDay: "Keine Veranstaltung für diesen Tag.. also ruhen Sie sich aus! :)",
                    previousYearText: "Vorheriges Jahr",
                    nextYearText: "Nächstes Jahr",
                    closeSidebarText: "Schließen Sie die Seitenleiste",
                    closeEventListText: "Schließen Sie die Ereignisliste"
                },
                pt: {
                    days: ["Domingo", "Segunda-Feira", "Terça-Feira", "Quarta-Feira", "Quinta-Feira", "Sexta-Feira", "Sábado"],
                    daysShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
                    daysMin: ["Do", "2a", "3a", "4a", "5a", "6a", "Sa"],
                    months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
                    monthsShort: ["Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
                    noEventForToday: "Nenhum evento para hoje.. então descanse! :)",
                    noEventForThisDay: "Nenhum evento para este dia.. então descanse! :)",
                    previousYearText: "Ano anterior",
                    nextYearText: "Próximo ano",
                    closeSidebarText: "Feche a barra lateral",
                    closeEventListText: "Feche a lista de eventos"
                },
                fr: {
                    days: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"],
                    daysShort: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"],
                    daysMin: ["Di", "Lu", "Ma", "Me", "Je", "Ve", "Sa"],
                    months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
                    monthsShort: ["Jan", "Fév", "Mar", "Avr", "Mai", "Juin", "Juil", "Août", "Sept", "Oct", "Nov", "Déc"],
                    noEventForToday: "Rien pour aujourd'hui... Belle journée :)",
                    noEventForThisDay: "Rien pour ce jour-ci... Profite de te réposer :)",
                    previousYearText: "Année précédente",
                    nextYearText: "L'année prochaine",
                    closeSidebarText: "Fermez la barre latérale",
                    closeEventListText: "Fermer la liste des événements"
                },
                nl: {
                    days: ["Zondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag"],
                    daysShort: ["Zon", "Maan", "Din", "Woe", "Don", "Vrij", "Zat"],
                    daysMin: ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
                    months: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
                    monthsShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
                    noEventForToday: "Geen event voor vandaag.. dus rust even uit! :)",
                    noEventForThisDay: "Geen event voor deze dag.. dus rust even uit! :)",
                    previousYearText: "Vorig jaar",
                    nextYearText: "Volgend jaar",
                    closeSidebarText: "Sluit de zijbalk",
                    closeEventListText: "Sluit de event lijst"
                },
                id: {
                    days: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
                    daysShort: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
                    daysMin: ["Mi", "Sn", "Sl", "Ra", "Ka", "Ju", "Sa"],
                    months: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"],
                    monthsShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agu", "Sep", "Okt", "Nov", "Des"],
                    noEventForToday: "Tidak ada Acara untuk Sekarang.. Jadi Beristirahatlah! :)",
                    noEventForThisDay: "Tidak ada Acara untuk Hari Ini.. Jadi Beristirahatlah! :)",
                    previousYearText: "Tahun Sebelumnya",
                    nextYearText: "Tahun Berikutnya",
                    closeSidebarText: "Tutup Sidebar",
                    closeEventListText: "Tutup Daftar Acara"
                }
            }
        };

        _.initials.weekends = {
            sun: _.initials.dates[_.options.language].daysShort[0],
            sat: _.initials.dates[_.options.language].daysShort[6]
        };

        if (_.options.calendarEvents != null) {
            for (var i = 0; i < _.options.calendarEvents.length; i++) {
                if (!_.options.calendarEvents[i].id) {
                    console.log('%c Event named: "' + _.options.calendarEvents[i].name + "\" doesn't have a unique ID ", "color:white;font-weight:bold;background-color:#e21d1d;");
                }
                if (_.isValidDate(_.options.calendarEvents[i].date)) {
                    _.options.calendarEvents[i].date = _.formatDate(_.options.calendarEvents[i].date, _.options.format);
                }
            }
        }

        _.startingDay = null;
        _.monthLength = null;
        _.windowW = $(window).width();

        _.current = {
            month: isNaN(this.month) || this.month == null ? new Date().getMonth() : this.month,
            year: isNaN(this.year) || this.year == null ? new Date().getFullYear() : this.year,
            date: _.formatDate(_.initials.dates[_.defaults.language].months[new Date().getMonth()] + " " + new Date().getDate() + " " + new Date().getFullYear(), _.options.format)
        };

        _.active = {
            month: _.current.month,
            year: _.current.year,
            date: _.current.date,
            event_date: _.current.date,
            events: []
        };

        _.label = {
            days: [],
            months: _.initials.dates[_.defaults.language].months,
            days_in_month: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        };

        _.markups = {
            calendarHTML: "",
            mainHTML: "",
            sidebarHTML: "",
            eventHTML: ""
        };

        _.elements = {
            calendarEl: $(element),
            innerEl: null,
            sidebarEl: null,
            eventEl: null,
            sidebarToggler: null,
            eventListToggler: null,
            activeDayEl: null,
            activeMonthEl: null,
            activeYearEl: null
        };

        _.breakpoints = {
            tablet: 768,
            mobile: 425
        };

        _.UI = {
            hasSidebar: true,
            hasEvent: true
        };

        _.formatDate = $.proxy(_.formatDate, _);
        _.selectDate = $.proxy(_.selectDate, _);
        _.selectMonth = $.proxy(_.selectMonth, _);
        _.selectYear = $.proxy(_.selectYear, _);
        _.selectEvent = $.proxy(_.selectEvent, _);
        _.toggleSidebar = $.proxy(_.toggleSidebar, _);
        _.toggleEventList = $.proxy(_.toggleEventList, _);

        _.instanceUid = instanceUid++;
        _.init(true);
    };

    EvoCalendar.prototype.init = function(initial) {
        var _ = this;

        if (!$(_.elements.calendarEl).hasClass("calendar-initialized")) {
            $(_.elements.calendarEl).addClass("evo-calendar calendar-initialized");

            if (_.windowW <= _.breakpoints.tablet) {
                _.toggleSidebar(false);
                _.toggleEventList(false);
            } else {
                _.options.sidebarDisplayDefault ? _.toggleSidebar(true) : _.toggleSidebar(false);
                _.options.eventDisplayDefault ? _.toggleEventList(true) : _.toggleEventList(false);
            }

            if (_.options.theme) {
                _.setTheme(_.options.theme);
            }

            _.buildTheBones();
        }
    };

    EvoCalendar.prototype.destroy = function() {
        var _ = this;

        _.destroyEventListener();
        if (_.elements.calendarEl) {
            _.elements.calendarEl.removeClass("calendar-initialized evo-calendar sidebar-hide event-hide");
            _.elements.calendarEl.empty();
            _.elements.calendarEl.attr("class", _.initials.default_class);
            $(_.elements.calendarEl).trigger("destroy", [_]);
        }
    };

    EvoCalendar.prototype.limitTitle = function(title, limit) {
        var newTitle = [];
        limit = limit === undefined ? 18 : limit;

        if (title.split(" ").join("").length > limit) {
            var titleSplit = title.split(" ");
            for (var i = 0; i < titleSplit.length; i++) {
                if (titleSplit[i].length + newTitle.join("").length <= limit) {
                    newTitle.push(titleSplit[i]);
                }
            }
            return newTitle.join(" ") + "...";
        }

        return title;
    };

    EvoCalendar.prototype.stringCheck = function(string) {
        return string.replace(/[^\w]/g, "\\$&");
    };

    EvoCalendar.prototype.parseFormat = function(format) {
        if (typeof format.toValue === "function" && typeof format.toDisplay === "function") {
            return format;
        }

        var separators = format.replace(this.initials.validParts, "\0").split("\0"),
            parts = format.match(this.initials.validParts);

        if (!separators || !separators.length || !parts || parts.length === 0) {
            console.log("%c Invalid date format ", "color:white;font-weight:bold;background-color:#e21d1d;");
        }

        return { separators: separators, parts: parts };
    };

    EvoCalendar.prototype.formatDate = function(date, format, language) {
        var _ = this;

        if (!date) return "";

        if (typeof format === "string") {
            format = _.parseFormat(format);
        }

        if (format.toDisplay) {
            return format.toDisplay(date, format, language);
        }

        var dateObject = new Date(date),
            val = {
                d: dateObject.getDate(),
                D: _.initials.dates[language].daysShort[dateObject.getDay()],
                DD: _.initials.dates[language].days[dateObject.getDay()],
                m: dateObject.getMonth() + 1,
                M: _.initials.dates[language].monthsShort[dateObject.getMonth()],
                MM: _.initials.dates[language].months[dateObject.getMonth()],
                yy: dateObject.getFullYear().toString().substring(2),
                yyyy: dateObject.getFullYear()
            };

        val.dd = (val.d < 10 ? "0" : "") + val.d;
        val.mm = (val.m < 10 ? "0" : "") + val.m;

        var date = [];
        var separators = $.extend([], format.separators);

        for (var i = 0, cnt = format.parts.length; i <= cnt; i++) {
            if (separators.length) {
                date.push(separators.shift());
            }
            date.push(val[format.parts[i]]);
        }

        return date.join("");
    };

    EvoCalendar.prototype.getBetweenDates = function(date) {
        var _ = this,
            dates = [];

        for (var i = 0; i < _.monthLength; i++) {
            var thisDate = _.formatDate(_.label.months[_.active.month] + " " + (i + 1) + " " + _.active.year, _.options.format);
            if (_.isBetweenDates(thisDate, date)) {
                dates.push(thisDate);
            }
        }

        return dates;
    };

    EvoCalendar.prototype.isBetweenDates = function(thisDate, dates) {
        var _ = this;

        if (dates instanceof Array) {
            var start = new Date(dates[0]),
                end = new Date(dates[1]);
        } else {
            var start = new Date(dates),
                end = new Date(dates);
        }

        return start <= new Date(thisDate) && end >= new Date(thisDate);
    };

    EvoCalendar.prototype.hasSameDayEventType = function(date, type) {
        var _ = this,
            count = 0;

        for (var i = 0; i < _.options.calendarEvents.length; i++) {
            if (_.options.calendarEvents[i].date instanceof Array) {
                var betweenDates = _.getBetweenDates(_.options.calendarEvents[i].date);
                for (var j = 0; j < betweenDates.length; j++) {
                    if (date === betweenDates[j] && type === _.options.calendarEvents[i].type) {
                        count++;
                    }
                }
            } else {
                if (date === _.options.calendarEvents[i].date && type === _.options.calendarEvents[i].type) {
                    count++;
                }
            }
        }

        return count > 0;
    };

    EvoCalendar.prototype.setTheme = function(themeName) {
        var _ = this,
            prevTheme = _.options.theme;

        _.options.theme = themeName.toLowerCase().split(" ").join("-");

        if (_.options.theme) {
            $(_.elements.calendarEl).removeClass(prevTheme);
            if (_.options.theme !== "default") {
                $(_.elements.calendarEl).addClass(_.options.theme);
            }
        }
    };

    EvoCalendar.prototype.resize = function() {
        var _ = this;

        _.windowW = $(window).width();

        if (_.windowW <= _.breakpoints.tablet) {
            _.toggleSidebar(false);
            _.toggleEventList(false);

            if (_.windowW <= _.breakpoints.mobile) {
                $(window).off("click.evocalendar.evo-" + _.instanceUid);
            } else {
                $(window).on("click.evocalendar.evo-" + _.instanceUid, $.proxy(_.toggleOutside, _));
            }
        } else {
            _.options.sidebarDisplayDefault ? _.toggleSidebar(true) : _.toggleSidebar(false);
            _.options.eventDisplayDefault ? _.toggleEventList(true) : _.toggleEventList(false);

            $(window).off("click.evocalendar.evo-" + _.instanceUid);
        }
    };

    EvoCalendar.prototype.initEventListener = function() {
        var _ = this;

        $(window).off("resize.evocalendar.evo-" + _.instanceUid).on("resize.evocalendar.evo-" + _.instanceUid, $.proxy(_.resize, _));

        if (_.options.sidebarToggler) {
            _.elements.sidebarToggler.off("click.evocalendar").on("click.evocalendar", _.toggleSidebar);
        }

        if (_.options.eventListToggler) {
            _.elements.eventListToggler.off("click.evocalendar").on("click.evocalendar", _.toggleEventList);
        }

        _.elements.sidebarEl.find("[data-month-val]").off("click.evocalendar").on("click.evocalendar", _.selectMonth);
        _.elements.sidebarEl.find("[data-year-val]").off("click.evocalendar").on("click.evocalendar", _.selectYear);
        _.elements.eventEl.find("[data-event-index]").off("click.evocalendar").on("click.evocalendar", _.selectEvent);
    };

    EvoCalendar.prototype.destroyEventListener = function() {
        var _ = this;

        $(window).off("resize.evocalendar.evo-" + _.instanceUid);
        $(window).off("click.evocalendar.evo-" + _.instanceUid);

        if (_.options.sidebarToggler) {
            _.elements.sidebarToggler.off("click.evocalendar");
        }

        if (_.options.eventListToggler) {
            _.elements.eventListToggler.off("click.evocalendar");
        }

        _.elements.innerEl.find(".calendar-day").children().off("click.evocalendar");
        _.elements.sidebarEl.find("[data-month-val]").off("click.evocalendar");
        _.elements.sidebarEl.find("[data-year-val]").off("click.evocalendar");
        _.elements.eventEl.find("[data-event-index]").off("click.evocalendar");
    };

    EvoCalendar.prototype.calculateDays = function() {
        var _ = this,
            nameDays = _.initials.dates[_.options.language].daysShort,
            firstDay = _.options.firstDayOfWeek;

        _.label.days = [];

        while (_.label.days.length < nameDays.length) {
            if (firstDay === nameDays.length) {
                firstDay = 0;
            }
            _.label.days.push(nameDays[firstDay]);
            firstDay++;
        }

        var startingDay = new Date(_.active.year, _.active.month).getDay() - _.options.firstDayOfWeek;
        if (startingDay < 0) {
            startingDay = _.label.days.length + startingDay;
        }
        _.startingDay = startingDay;

        _.monthLength = _.label.days_in_month[_.active.month];
        if (_.active.month === 1) {
            if ((_.active.year % 4 === 0 && _.active.year % 100 !== 0) || _.active.year % 400 === 0) {
                _.monthLength = 29;
            }
        }
    };

    EvoCalendar.prototype.buildTheBones = function() {
        var _ = this;

        _.calculateDays();

        if (!_.elements.calendarEl.html()) {
            var markup = '<div class="calendar-sidebar">' +
                '<div class="calendar-year">' +
                '<button class="icon-button" role="button" data-year-val="prev" title="' + _.initials.dates[_.options.language].previousYearText + '"><span class="chevron-arrow-left"></span></button>&nbsp;<p></p>&nbsp;<button class="icon-button" role="button" data-year-val="next" title="' + _.initials.dates[_.options.language].nextYearText + '"><span class="chevron-arrow-right"></span></button>' +
                '</div>' +
                '<div class="month-list"><ul class="calendar-months">';

            for (var i = 0; i < _.label.months.length; i++) {
                markup += '<li class="month" role="button" data-month-val="' + i + '">' + _.initials.dates[_.options.language].months[i] + '</li>';
            }
            markup += '</ul></div></div>';

            markup += '<div class="calendar-inner">' +
                '<table class="calendar-table">' +
                '<tr><th colspan="7"></th></tr>' +
                '<tr class="calendar-header">';

            for (var i = 0; i < _.label.days.length; i++) {
                var headerClass = "calendar-header-day";
                if (_.label.days[i] === _.initials.weekends.sat || _.label.days[i] === _.initials.weekends.sun) {
                    headerClass += " --weekend";
                }
                markup += '<td class="' + headerClass + '">' + _.label.days[i] + '</td>';
            }
            markup += '</tr></table></div>';

            markup += '<div class="calendar-events">' +
                '<div class="event-header"><p></p></div>' +
                '<div class="event-list"></div></div>';

            _.elements.calendarEl.html(markup);

            _.elements.sidebarEl = $(_.elements.calendarEl).find(".calendar-sidebar");
            _.elements.innerEl = $(_.elements.calendarEl).find(".calendar-inner");
            _.elements.eventEl = $(_.elements.calendarEl).find(".calendar-events");

            if (_.options.sidebarToggler) {
                $(_.elements.sidebarEl).append('<span id="sidebarToggler" role="button" aria-pressed title="' + _.initials.dates[_.options.language].closeSidebarText + '"><button class="icon-button"><span class="bars"></span></button></span>');
                _.elements.sidebarToggler = $(_.elements.sidebarEl).find("span#sidebarToggler");
            }

            if (_.options.eventListToggler) {
                $(_.elements.calendarEl).append('<span id="eventListToggler" role="button" aria-pressed title="' + _.initials.dates[_.options.language].closeEventListText + '"><button class="icon-button"><span class="chevron-arrow-right"></span></button></span>');
                _.elements.eventListToggler = $(_.elements.calendarEl).find("span#eventListToggler");
            }
        }

        _.buildSidebarYear();
        _.buildSidebarMonths();
        _.buildCalendar();
        _.buildEventList();
        _.initEventListener();
        _.resize();
    };

    EvoCalendar.prototype.buildEventList = function() {
        var _ = this,
            hasEvent = false,
            activeDate = _.formatDate(_.active.date, _.options.eventHeaderFormat, _.options.language),
            eventListEl = _.elements.eventEl.find(".event-list");

        _.active.events = [];
        _.elements.eventEl.find(".event-header > p").text(activeDate);

        if (eventListEl.children().length > 0) {
            eventListEl.empty();
        }

        if (_.options.calendarEvents) {
            for (var i = 0; i < _.options.calendarEvents.length; i++) {
                if (_.isBetweenDates(_.active.date, _.options.calendarEvents[i].date) || 
                    (_.options.calendarEvents[i].everyYear && 
                    new Date(_.active.date).getMonth() + 1 + " " + new Date(_.active.date).getDate() === 
                    new Date(_.options.calendarEvents[i].date).getMonth() + 1 + " " + new Date(_.options.calendarEvents[i].date).getDate())) {
                    addEventList(_.options.calendarEvents[i]);
                }
            }
        }

        if (!hasEvent) {
            var noEvent = '<div class="event-empty">';
            noEvent += _.active.date === _.current.date ? 
                "<p>" + _.initials.dates[_.options.language].noEventForToday + "</p>" :
                "<p>" + _.initials.dates[_.options.language].noEventForThisDay + "</p>";
            noEvent += "</div>";
            eventListEl.append(noEvent);
        }

        function addEventList(event) {
            hasEvent = true;
            _.addEventList(event);
        }
    };

    EvoCalendar.prototype.addEventList = function(event) {
        var _ = this,
            eventListEl = _.elements.eventEl.find(".event-list");

        if (eventListEl.find("[data-event-index]").length === 0) {
            eventListEl.empty();
        }

        _.active.events.push(event);

        var eventMarkup = '<div class="event-container" role="button" data-event-index="' + event.id + '">' +
            '<div class="event-icon"><div class="event-bullet-' + event.type + '"';
        if (event.color) {
            eventMarkup += ' style="background-color:' + event.color + '"';
        }
        eventMarkup += '></div></div><div class="event-info">' +
            '<p class="event-title">' + _.limitTitle(event.name);
        if (event.badge) {
            eventMarkup += '<span>' + event.badge + '</span>';
        }
        eventMarkup += '</p>';
        if (event.description) {
            eventMarkup += '<p class="event-desc">' + event.description + '</p>';
        }
        eventMarkup += '</div></div>';

        eventListEl.append(eventMarkup);
        _.elements.eventEl.find('[data-event-index="' + event.id + '"]').off("click.evocalendar").on("click.evocalendar", _.selectEvent);
    };

    EvoCalendar.prototype.removeEventList = function(eventId) {
        var _ = this,
            eventListEl = _.elements.eventEl.find(".event-list"),
            eventEl = eventListEl.find('[data-event-index="' + eventId + '"]');

        if (eventEl.length > 0) {
            eventEl.remove();

            if (eventListEl.find("[data-event-index]").length === 0) {
                eventListEl.empty();
                var noEvent = _.active.date === _.current.date ? 
                    "<p>" + _.initials.dates[_.options.language].noEventForToday + "</p>" :
                    "<p>" + _.initials.dates[_.options.language].noEventForThisDay + "</p>";
                eventListEl.append(noEvent);
            }
        }
    };

    EvoCalendar.prototype.buildSidebarYear = function() {
        var _ = this;
        _.elements.sidebarEl.find(".calendar-year > p").text(_.active.year);
    };

    EvoCalendar.prototype.buildSidebarMonths = function() {
        var _ = this;
        _.elements.sidebarEl.find(".calendar-months > [data-month-val]").removeClass("active-month");
        _.elements.sidebarEl.find('.calendar-months > [data-month-val="' + _.active.month + '"]').addClass("active-month");
    };

    EvoCalendar.prototype.buildCalendar = function() {
        var _ = this;

        _.calculateDays();
        var markup;

        var activeMonth = _.formatDate(new Date(_.label.months[_.active.month] + " 1 " + _.active.year), _.options.titleFormat, _.options.language);
        _.elements.innerEl.find(".calendar-table th").text(activeMonth);

        _.elements.innerEl.find(".calendar-body").remove();
        markup += '<tr class="calendar-body">';

        var day = 1;
        for (var row = 0; row < 6; row++) {
            for (var col = 0; col < _.label.days.length; col++) {
                var dayClass = "calendar-day";
                if (_.label.days[col] === _.initials.weekends.sat || _.label.days[col] === _.initials.weekends.sun) {
                    dayClass += " --weekend";
                }

                if (day <= _.monthLength && (row > 0 || col >= _.startingDay)) {
                    markup += '<td class="' + dayClass + '">' +
                        '<div class="day" role="button" data-date-val="' + _.formatDate(_.label.months[_.active.month] + " " + day + " " + _.active.year, _.options.format) + '">' + day + '</div>';
                    day++;
                } else {
                    markup += '<td>';
                }
                markup += '</td>';
            }
            if (day > _.monthLength) {
                break;
            }
            markup += '</tr><tr class="calendar-body">';
        }
        markup += '</tr>';

        _.elements.innerEl.find(".calendar-table").append(markup);

        if (_.options.todayHighlight) {
            _.elements.innerEl.find("[data-date-val='" + _.current.date + "']").addClass("calendar-today");
        }

        _.elements.innerEl.find(".calendar-day").children().off("click.evocalendar").on("click.evocalendar", _.selectDate);

        var activeDayEl = _.elements.innerEl.find("[data-date-val='" + _.active.date + "']");
        if (activeDayEl) {
            _.elements.innerEl.children().removeClass("calendar-active");
            activeDayEl.addClass("calendar-active");
        }

        if (_.options.calendarEvents != null) {
            _.buildEventIndicator();
        }
    };

    EvoCalendar.prototype.addEventIndicator = function(event) {
        var _ = this,
            eventDate = event.date,
            eventType = _.stringCheck(event.type),
            eventEl, indicatorMarkup;

        if (eventDate instanceof Array) {
            if (event.everyYear) {
                for (var i = 0; i < eventDate.length; i++) {
                    eventDate[i] = _.formatDate(new Date(eventDate[i]).setFullYear(_.active.year), _.options.format);
                }
            }
            var betweenDates = _.getBetweenDates(eventDate);
            for (var i = 0; i < betweenDates.length; i++) {
                addIndicator(betweenDates[i]);
            }
        } else {
            if (event.everyYear) {
                eventDate = _.formatDate(new Date(eventDate).setFullYear(_.active.year), _.options.format);
            }
            addIndicator(eventDate);
        }

        function addIndicator(date) {
            eventEl = _.elements.innerEl.find('[data-date-val="' + date + '"]');
            if (eventEl.find("span.event-indicator").length === 0) {
                eventEl.append('<span class="event-indicator"></span>');
            }

            if (eventEl.find("span.event-indicator > .type-bullet > .type-" + eventType).length === 0) {
                indicatorMarkup = '<div class="type-bullet"><div class="type-' + event.type + '"';
                if (event.color) {
                    indicatorMarkup += ' style="background-color:' + event.color + '"';
                }
                indicatorMarkup += '></div></div>';
                eventEl.find(".event-indicator").append(indicatorMarkup);
            }
        }
    };

    EvoCalendar.prototype.removeEventIndicator = function(event) {
        var _ = this,
            eventDate = event.date,
            eventType = _.stringCheck(event.type);

        if (eventDate instanceof Array) {
            var betweenDates = _.getBetweenDates(eventDate);
            for (var i = 0; i < betweenDates.length; i++) {
                removeIndicator(betweenDates[i]);
            }
        } else {
            removeIndicator(eventDate);
        }

        function removeIndicator(date) {
            var eventEl = _.elements.innerEl.find('[data-date-val="' + date + '"] span.event-indicator');
            if (eventEl.length > 0) {
                if (!_.hasSameDayEventType(date, eventType)) {
                    eventEl.find(".type-bullet > .type-" + eventType).parent().remove();
                }
            }
        }
    };

    EvoCalendar.prototype.buildEventIndicator = function() {
        var _ = this;
        _.elements.innerEl.find(".calendar-day > day > .event-indicator").empty();

        for (var i = 0; i < _.options.calendarEvents.length; i++) {
            _.addEventIndicator(_.options.calendarEvents[i]);
        }
    };

    EvoCalendar.prototype.selectEvent = function(event) {
        var _ = this,
            eventContainer = $(event.target).closest(".event-container"),
            eventIndex = $(eventContainer).data("eventIndex").toString(),
            eventDataIndex = _.options.calendarEvents.map(function(event) {
                return event.id.toString();
            }).indexOf(eventIndex),
            eventData = _.options.calendarEvents[eventDataIndex];

        if (eventData.date instanceof Array) {
            eventData.dates_range = _.getBetweenDates(eventData.date);
        }

        $(_.elements.calendarEl).trigger("selectEvent", [eventData]);
    };

    EvoCalendar.prototype.selectYear = function(year) {
        var _ = this,
            newYear;

        if (typeof year === "string" || typeof year === "number") {
            if (parseInt(year).toString().length === 4) {
                newYear = parseInt(year);
            }
        } else {
            var yearEl = $(year.target).closest("[data-year-val]");
            newYear = $(yearEl).data("yearVal");
        }

        if (newYear === "prev") {
            _.active.year--;
        } else if (newYear === "next") {
            _.active.year++;
        } else if (typeof newYear === "number") {
            _.active.year = newYear;
        }

        if (_.windowW <= _.breakpoints.mobile && _.UI.hasSidebar) {
            _.toggleSidebar(false);
        }

        $(_.elements.calendarEl).trigger("selectYear", [_.active.year]);

        _.buildSidebarYear();
        _.buildCalendar();
    };

    EvoCalendar.prototype.selectMonth = function(month) {
        var _ = this,
            newMonth;

        if (typeof month === "string" || typeof month === "number") {
            if (month >= 0 && month <= _.label.months.length) {
                newMonth = month.toString();
            }
        } else {
            newMonth = _.active.month = $(month.currentTarget).data("monthVal");
        }

        _.active.month = newMonth;
        _.buildSidebarMonths();
        _.buildCalendar();

        if (_.windowW <= _.breakpoints.tablet && _.UI.hasSidebar) {
            _.toggleSidebar(false);
        }

        $(_.elements.calendarEl).trigger("selectMonth", [_.initials.dates[_.options.language].months[_.active.month], _.active.month]);
    };

    EvoCalendar.prototype.selectDate = function(date) {
        var _ = this,
            oldDate = _.active.date,
            newDate, newYear, newMonth, dateEl;

        if (typeof date === "string" || typeof date === "number" || date instanceof Date) {
            newDate = _.formatDate(new Date(date), _.options.format);
            newYear = new Date(newDate).getFullYear();
            newMonth = new Date(newDate).getMonth();

            if (_.active.year !== newYear) {
                _.selectYear(newYear);
            }

            if (_.active.month !== newMonth) {
                _.selectMonth(newMonth);
            }

            dateEl = _.elements.innerEl.find("[data-date-val='" + newDate + "']");
        } else {
            dateEl = $(date.currentTarget);
            newDate = dateEl.data("dateVal");
        }

        var isSameDate = _.active.date === newDate;
        _.active.date = newDate;
        _.active.event_date = newDate;

        _.elements.innerEl.find("[data-date-val]").removeClass("calendar-active");
        dateEl.addClass("calendar-active");

        if (!isSameDate) {
            _.buildEventList();
        }

        $(_.elements.calendarEl).trigger("selectDate", [_.active.date, oldDate]);
    };

    EvoCalendar.prototype.getActiveDate = function() {
        var _ = this;
        return _.active.date;
    };

    EvoCalendar.prototype.getActiveEvents = function() {
        var _ = this;
        return _.active.events;
    };

    EvoCalendar.prototype.toggleOutside = function(event) {
        var _ = this,
            isOutsideClick = event.target === _.elements.innerEl[0];

        if (_.UI.hasSidebar && isOutsideClick) {
            _.toggleSidebar(false);
        }

        if (_.UI.hasEvent && isOutsideClick) {
            _.toggleEventList(false);
        }
    };

    EvoCalendar.prototype.toggleSidebar = function(show) {
        var _ = this;

        if (show === undefined || show.originalEvent) {
            $(_.elements.calendarEl).toggleClass("sidebar-hide");
            _.UI.hasSidebar = !_.UI.hasSidebar;
        } else if (show) {
            $(_.elements.calendarEl).removeClass("sidebar-hide");
            _.UI.hasSidebar = true;
        } else {
            $(_.elements.calendarEl).addClass("sidebar-hide");
            _.UI.hasSidebar = false;
        }

        if (_.windowW <= _.breakpoints.tablet && _.UI.hasSidebar && _.UI.hasEvent) {
            _.toggleEventList();
        }
    };

    EvoCalendar.prototype.toggleEventList = function(show) {
        var _ = this;

        if (show === undefined || show.originalEvent) {
            $(_.elements.calendarEl).toggleClass("event-hide");
            _.UI.hasEvent = !_.UI.hasEvent;
        } else if (show) {
            $(_.elements.calendarEl).removeClass("event-hide");
            _.UI.hasEvent = true;
        } else {
            $(_.elements.calendarEl).addClass("event-hide");
            _.UI.hasEvent = false;
        }

        if (_.windowW <= _.breakpoints.tablet && _.UI.hasEvent && _.UI.hasSidebar) {
            _.toggleSidebar();
        }
    };

    EvoCalendar.prototype.addCalendarEvent = function(events) {
        var _ = this;

        if (events instanceof Array) {
            for (var i = 0; i < events.length; i++) {
                addEvent(events[i]);
            }
        } else if (typeof events === "object") {
            addEvent(events);
        }

        function addEvent(event) {
            if (!event.id) {
                console.log('%c Event named: "' + event.name + "\" doesn't have a unique ID ", "color:white;font-weight:bold;background-color:#e21d1d;");
            }
            if (event.date instanceof Array) {
                for (var i = 0; i < event.date.length; i++) {
                    if (isValidDate(event.date[i])) {
                        event.date[i] = _.formatDate(new Date(event.date[i]), _.options.format);
                    }
                }
            } else {
                if (isValidDate(event.date)) {
                    event.date = _.formatDate(new Date(event.date), _.options.format);
                }
            }
            if (_.options.calendarEvents == null) {
                _.options.calendarEvents = [];
            }
            _.options.calendarEvents.push(event);
            _.addEventIndicator(event);

            if (_.active.event_date === event.date) {
                _.addEventList(event);
            }
        }

        function isValidDate(date) {
            if (_.isValidDate(date)) {
                return true;
            }
            console.log('%c Event named: "' + event.name + '" has invalid date ', "color:white;font-weight:bold;background-color:#e21d1d;");
            return false;
        }
    };

    EvoCalendar.prototype.removeCalendarEvent = function(events) {
        var _ = this;

        if (events instanceof Array) {
            for (var i = 0; i < events.length; i++) {
                removeEvent(events[i]);
            }
        } else {
            removeEvent(events);
        }

        function removeEvent(eventId) {
            var eventIndex = _.options.calendarEvents.map(function(event) {
                return event.id;
            }).indexOf(eventId);

            if (eventIndex >= 0) {
                var event = _.options.calendarEvents[eventIndex];
                _.options.calendarEvents.splice(eventIndex, 1);
                _.removeEventList(eventId);
                _.removeEventIndicator(event);
            } else {
                console.log("%c " + eventId + ": ID not found ", "color:white;font-weight:bold;background-color:#e21d1d;");
            }
        }
    };

    EvoCalendar.prototype.isValidDate = function(date) {
        return new Date(date) && !isNaN(new Date(date).getTime());
    };

    $.fn.evoCalendar = function() {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            len = _.length,
            i = 0,
            ret;

        for (i; i < len; i++) {
            if (typeof opt === "object" || typeof opt === "undefined") {
                _[i].evoCalendar = new EvoCalendar(_[i], opt);
            } else {
                ret = _[i].evoCalendar[opt].apply(_[i].evoCalendar, args);
            }
            if (typeof ret !== "undefined") {
                return ret;
            }
        }

        return _;
    };

}));
